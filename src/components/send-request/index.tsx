'use client';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import React, { useState } from 'react';
import styles from './index.module.scss';

const schema = z.object({
  fullName: z
    .string()
    .nonempty('–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
    .max(44, '–ú–∞–∫—Å–∏–º—É–º 44 —Å–∏–º–≤–æ–ª–∞'),
  phoneNumber: z.string().nonempty('–ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  description: z
    .string()
    .nonempty(
      '–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—â–µ—Ç–µ, –≤–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.'
    ),
});
type FormData = z.infer<typeof schema>;

const countries = [
  { code: '+996', name: 'Kyrgyzstan', flag: 'üá∞üá¨' },
  { code: '+1', name: 'United States', flag: 'üá∫üá∏' },
  { code: '+44', name: 'United Kingdom', flag: 'üá¨üáß' },
  { code: '+7', name: 'Russia', flag: 'üá∑üá∫' },
];

const SendRequest = () => {
  const [data, setData] = useState<FormData>({
    fullName: '',
    phoneNumber: '',
    description: '',
  });

  const {
    register,
    handleSubmit,
    clearErrors,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(schema),
    mode: 'onSubmit',
    shouldFocusError: false,
    shouldUseNativeValidation: false,
  });

  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setData((prev) => ({ ...prev, [name]: value }));
  };

  const handleFocus = (fieldName: keyof FormData) => {
    clearErrors(fieldName);
  };

  return (
    <form className={styles.content}>
      <input
        className={styles.fullName}
        type="text"
        key="fullName"
        {...register('fullName')}
        value={errors['fullName']?.message || data['fullName']}
        placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û"
        onChange={changeHandler}
        onFocus={() => handleFocus('fullName')}
        autoFocus={false}
      />
      <div className={styles.phoneNumberWrap}>
        <input
          className={styles.countryCode}
          type="tel"
          key="phoneNumber"
          {...register('phoneNumber')}
          value={errors['phoneNumber']?.message || data['phoneNumber']}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û"
          onChange={changeHandler}
          onFocus={() => handleFocus('fullName')}
          autoFocus={false}
        />
      </div>
    </form>
  );
};

export default SendRequest;
